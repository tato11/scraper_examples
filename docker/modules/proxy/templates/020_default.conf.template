server {
  listen 80;
  server_name ${WEB_DOMAIN_NAME};
  return 301 https://${WEB_DOMAIN_NAME}/$request_uri;
}

server {
  listen 443 ssl;
  keepalive_timeout 10;
  server_name ${WEB_DOMAIN_NAME};
  root /var/www/html/public;

  # SSL configuration
  ssl_certificate ${PROXY_APP_CERTIFICATE_FILE};
  ssl_certificate_key ${PROXY_APP_CERTIFICATE_KEY_FILE};

  # this is the internal Docker DNS
  resolver ${DOCKER_RESOLVER_IP};

  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-NginX-Proxy true;
  proxy_set_header X-Forwarded-Proto: $scheme;
  proxy_set_header X-Forwarded-Ssl on; # Optional
  proxy_set_header X-Forwarded-Port $server_port;
  proxy_set_header X-Forwarded-Host $host;
  proxy_set_header Host $http_host;
  proxy_redirect off;
  #proxy_set_header origin 'https://${WEB_DOMAIN_NAME}';

  # Use a variable to bypass upstream validation
  set $upstream http://app:3000;

  # Set cache settings
  include settings/20-cache.${ENV}.conf;

  location / {
    # If the file exists as a static file serve it directly without
    # running all the other rewrite tests on it
    if (-f $request_filename) {
      break;
    }
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }
    if (!-f $request_filename) {
      proxy_pass $upstream;
      break;
    }
  }

  # Error pages
  # error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /var/www/html/public;
  }
}
